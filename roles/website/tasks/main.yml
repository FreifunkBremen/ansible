---
- name: Add user
  user: name={{ website_user }} home=/home/{{ website_user }} shell=/bin/zsh

- name: Create directory for readonly files
  file: path=/readonly/{{ website_user }} state=directory owner={{ website_user }} group={{ website_group }} mode=0750

- name: Create needed folder structure
  file: path={{ item }} state=directory recurse=yes owner={{ website_user }} group={{ website_group }} mode=0755
  with_items:
  - /home/{{ website_user }}/.config/letsencrypt
  - /home/{{ website_user }}/.local/bin
  - /home/{{ website_user }}/.var/jekyll-envs/{{ website_domain }}
  - /home/{{ website_user }}/.var/log
  - /home/{{ website_user }}/.cache
  - /var/www/{{ website_user }}/domains/{{ website_domain }}
  - /var/www/{{ website_user }}/cgi-bin
  - /var/www/{{ website_user }}/fcgi-bin
  - /var/www/{{ website_user }}/letsencrypt

- name: Create directories for Apache log files and SSL certificates
  file: path=/readonly/{{ website_user }}/{{ item }} state=directory owner=root group=root mode=0755
  with_items:
    - log
    - ssl

- name: Clone content repository
  git: repo=https://github.com/FreifunkBremen/bremen.freifunk.net dest=/home/{{ website_user }}/.var/jekyll-envs/{{ website_domain }} force=yes
  become: yes
  become_user: "{{ website_user }}"

- name: Install Pygments
  apt: name=python-pygments

- name: Install Jekyll and dependencies via bundler
  command: bundle install --path .bundle
  args:
    chdir: /home/{{ website_user }}/.var/jekyll-envs/{{ website_domain }}
  become: yes
  become_user: "{{ website_user }}"

- name: Install CGI wrapper
  template: src=php-fcgi-starter dest=/var/www/{{ website_user }}/fcgi-bin/ mode=700 owner={{ website_user }} group={{ website_group }}

- name: Create log file for Github webhook target
  file: path=/home/{{ website_user }}/.var/log/github-webhook.log state=touch owner={{ website_user }} group={{ website_user }}

- name: Install Github webhook target
  template: src=webhook.php dest=/var/www/{{ website_user }}/domains/{{ website_domain }}/ owner={{ website_user }} group={{ website_user }}

- name: Install Jekyll update script
  template: src=update-jekyll.sh dest=/home/{{ website_user }}/.local/bin/update-jekyll.sh mode=700 owner={{ website_user }} group={{ website_user }}


# Meshviewer
- name: Install ruby-sass
  apt: name=ruby-sass

- name: Clone Meshviewer repository
  git: repo=https://github.com/FreifunkBremen/meshviewer.git version=v4 dest=/home/{{ website_user }}/.var/meshviewer force=yes
  become: yes
  become_user: "{{ website_user }}"
  register: meshviewer_checkout

- name: Install Meshviewer dependencies
  npm: path=/home/{{ website_user }}/.var/meshviewer
  become: yes
  become_user: "{{ website_user }}"

- name: Install grunt-cli for Meshviewer
  npm: name=grunt-cli path=/home/{{ website_user }}/.var/meshviewer
  become: yes
  become_user: "{{ website_user }}"

- name: Build Meshviewer
  command: chdir=/home/{{ website_user }}/.var/meshviewer ./node_modules/.bin/grunt
  when: meshviewer_checkout.changed
  become: yes
  become_user: "{{ website_user }}"
  args:
    creates: /home/{{ website_user }}/.var/meshviewer/build/

- name: Copy built Meshviewer to www directory
  command: cp -r /home/{{ website_user }}/.var/meshviewer/build/ /var/www/{{ website_user }}/domains/{{ website_domain }}/meshviewer/
  when: meshviewer_checkout.changed
  become: yes
  become_user: "{{ website_user }}"
  args:
    creates: /var/www/{{ website_user }}/domains/{{ website_domain }}/meshviewer/

- name: Install Meshviewer config
  copy: src=config.json dest=/var/www/{{ website_user }}/domains/{{ website_domain }}/meshviewer/ mode=0644 owner={{ website_user }} group={{ website_user }}
  when: meshviewer_checkout.changed


# Apache

- name: Install Apache user config
  template: src=website.conf dest=/etc/apache2/sites-available/010-{{ website_user }}.conf mode=0644
  notify: restart apache

- name: Enable Apache user config
  command: a2ensite 010-{{ website_user }}
  args:
    creates: /etc/apache2/sites-enabled/010-{{ website_user }}.conf

- name: Install Apache site config (common part)
  template: src=website-common.conf dest=/etc/apache2/{{ website_user }}.{{ website_domain }}-common.conf mode=0644
  notify: restart apache

- name: Install Apache vHost config (HTTP)
  template: src=website-http.conf dest=/etc/apache2/sites-available/{{ website_user }}.{{ website_domain }}.conf mode=0644
  notify: restart apache

- name: Enable Apache vHost config (HTTP)
  command: a2ensite {{ website_user }}.{{ website_domain }}
  args:
    creates: /etc/apache2/sites-enabled/{{ website_user }}.{{ website_domain }}.conf
  notify: restart apache

- name: Copy letsencrypt config
  template: src=letsencrypt.sh.config.sh dest=/home/{{ website_user }}/.config/letsencrypt/config.sh owner={{ website_user }} group={{ website_group }}

- name: Get letsencrypt certificates
  command: /opt/letsencrypt.sh/letsencrypt.sh -c -d {{ website_domain }} -d {{ alt_domain }}
  args:
    chdir: /home/{{ website_user }}/.config/letsencrypt
    creates: /home/{{ website_user }}/.config/letsencrypt/certs/{{ website_domain }}/fullchain.pem
  become: yes
  become_user: "{{ website_user }}"

- name: Copy certificate
  shell: cat /home/{{ website_user }}/.config/letsencrypt/certs/{{ website_domain }}/privkey.pem /home/{{ website_user }}/.config/letsencrypt/certs/{{ website_domain }}/fullchain.pem > /readonly/{{ website_user }}/ssl/{{ website_domain }}.combined.pem
  args:
    creates: /readonly/{{ website_user }}/ssl/{{ website_domain }}.combined.pem

- name: Install Apache vHost config (HTTPS)
  template: src=website-https.conf dest=/etc/apache2/sites-available/{{ website_user }}.{{ website_domain }}-https.conf mode=0644
  notify: restart apache

- name: Enable Apache vHost config (HTTPS)
  command: a2ensite {{ website_user }}.{{ website_domain }}-https
  args:
    creates: /etc/apache2/sites-enabled/{{ website_user }}.{{ website_domain }}-https.conf
  notify: restart apache

- name: Run Jekyll
  command: /home/{{ website_user }}/.local/bin/update-jekyll.sh
  become: yes
  become_user: "{{ website_user }}"
