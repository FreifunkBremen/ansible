---
- name: Add user
  user: name={{ website_user }} home=/home/{{ website_user }} shell=/bin/zsh

- name: Create needed folder structure
  file: path={{ item }} state=directory recurse=yes owner={{ website_user }} group={{ website_group }} mode=0755
  with_items:
  - /home/{{ website_user }}/.local/bin/
  - /home/{{ website_user }}/.var/jekyll-envs/{{ website_domain }}/
  - /home/{{ website_user }}/.var/log/
  - /var/www/{{ website_user }}/domains/{{ website_domain }}/
  - /var/www/{{ website_user }}/cgi-bin/

- name: Clone content repository
  git: repo=https://github.com/FreifunkBremen/bremen.freifunk.net dest=/home/{{ website_user }}/.var/jekyll-envs/{{ website_domain }}/ force=yes
  sudo: true
  sudo_user: "{{ website_user }}"

- name: Install Pygments
  apt: name=python-pygments

- name: Install Gemfile for Jekyll
  copy: src=Gemfile dest=/home/{{ website_user }}/.var/jekyll-envs/{{ website_domain }}/ owner={{ website_user }} group={{ website_user }}

- name: Install Jekyll and dependencies via bundler
  command: bundle install --path .bundle
  args:
    chdir: /home/{{ website_user }}/.var/jekyll-envs/{{ website_domain }}/
  sudo: true
  sudo_user: "{{ website_user }}"

- name: Install CGI wrapper
  template: src=php-cgi-starter dest=/var/www/{{ website_user }}/cgi-bin/ mode=755 owner={{ website_user }} group={{ website_user }}

- name: Install .htaccess file
  copy: src=htaccess dest=/var/www/{{ website_user }}/domains/{{ website_domain }}/.htaccess owner={{ website_user }} group={{ website_user }}

- name: Create log file for Github webhook target
  file: path=/home/{{ website_user }}/.var/log/github-webhook.log state=touch owner={{ website_user }} group={{ website_user }}

- name: Install Github webhook target
  template: src=webhook.php dest=/var/www/{{ website_user }}/domains/{{ website_domain }}/ owner={{ website_user }} group={{ website_user }}

- name: Install Jekyll update script
  template: src=update-jekyll.sh dest=/home/{{ website_user }}/.local/bin/update-jekyll.sh mode=755 owner={{ website_user }} group={{ website_user }}

# TODO: this should be replaced by some actually signed certificate:
- name: Generate self-signed SSL certificate
  command: openssl req -new -x509 -nodes -out /etc/ssl/certs/{{ website_domain }}.pem -keyout /etc/ssl/private/{{ website_domain }}.key -days 365 -subj "/CN={{ website_domain }}"
  args:
    creates: /etc/ssl/certs/{{ website_domain }}.pem
    creates: /etc/ssl/private/{{ website_domain }}.key

- name: Install Apache site config
  template: src=ffhb-website.conf dest=/etc/apache2/sites-available/ mode=644

- name: Enable Apache CGI module
  command: a2enmod cgi
  notify: restart apache

- name: Enable Apache site config
  command: a2ensite ffhb-website
  notify: restart apache
